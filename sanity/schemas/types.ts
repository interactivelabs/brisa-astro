/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type TestimonialList = {
  _type: "testimonial-list";
  intro?: Array<string>;
  testimonials?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
};

export type TestimonialFeatured = {
  _type: "testimonial.featured";
  testimonial?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "testimonial";
  };
};

export type StepList = {
  _type: "step-list";
  intro?: Array<string>;
  steps?: Array<{
    content?: Array<string>;
    _key: string;
  }>;
};

export type StatList = {
  _type: "stat-list";
  intro?: Array<string>;
  stats?: Array<{
    value?: string;
    subValue?: string;
    text?: string;
    _key: string;
  }>;
  textAlign?: "left" | "center" | "right" | "justify";
};

export type Spacer = {
  _type: "spacer";
  height?: number;
  desktopHeight?: number;
};

export type PricingList = {
  _type: "pricing-list";
  intro?: Array<string>;
  tiers?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "pricing";
  }>;
};

export type LogoList = {
  _type: "logo-list";
  pretitle?: string;
  intro?: Array<string>;
  logos?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "logo";
  }>;
  logoType?: "default" | "light" | "dark";
  autoScroll?: boolean;
};

export type Hero = {
  _type: "hero";
  pretitle?: string;
  largetext?: Array<
    {
      _key: string;
    } & HeroLine
  >;
  content?: Array<string>;
  ctas?: Array<
    {
      _key: string;
    } & Cta
  >;
  enableDefault?: boolean;
  bgImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    loading?: "lazy" | "eager";
    _type: "image";
  };
  bgImageMobile?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  textAlign?: "left" | "center" | "right" | "justify";
  alignItems?: "start" | "center" | "end";
};

export type FlagList = {
  _type: "flag-list";
  intro?: Array<string>;
  items?: Array<{
    icon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    content?: Array<string>;
    _key: string;
  }>;
  iconSize?: number;
  iconPosition?: "top" | "left";
};

export type CreativeModule = {
  _type: "creative-module";
  intro?: Array<string>;
  modules?: Array<{
    subModules?: Array<
      | {
          ctas?: Array<
            {
              _key: string;
            } & Cta
          >;
          _type: "ctas";
          _key: string;
        }
      | {
          icon?: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
          };
          size?: number;
          _type: "icon";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          aspectRatio?: string;
          _type: "image";
          _key: string;
        }
      | {
          content?: Array<string>;
          _type: "richtext";
          _key: string;
        }
    >;
    colSpan?: number;
    _key: string;
  }>;
  columns?: number;
  bordered?: boolean;
  textAlign?: "left" | "center" | "right" | "justify";
  alignItems?: "start" | "center" | "end";
};

export type Callout = {
  _type: "callout";
  content?: Array<string>;
  ctas?: Array<
    {
      _key: string;
    } & Cta
  >;
};

export type Breadcrumbs = {
  _type: "breadcrumbs";
  crumbs?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type AccordionList = {
  _type: "accordion-list";
  intro?: Array<string>;
  items?: Array<{
    summary?: string;
    content?: Array<string>;
    open?: boolean;
    _key: string;
  }>;
  layout?: "vertical" | "horizontal";
};

export type HeroLine = {
  _type: "heroLine";
  text?: string;
  iconLeft?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  iconRight?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type LinkList = {
  _type: "link.list";
  link?: Link;
  links?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type Cta = {
  _type: "cta";
  link?: Link;
  style?: "action" | "action-outline" | "ghost" | "link";
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content?: Array<string>;
  author?: {
    name?: string;
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type Pricing = {
  _id: string;
  _type: "pricing";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  highlight?: string;
  price?: {
    base?: number;
    strikethrough?: number;
    suffix?: string;
  };
  ctas?: Array<
    {
      _key: string;
    } & Cta
  >;
  content?: Array<string>;
};

export type Logo = {
  _id: string;
  _type: "logo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    default?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    light?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    dark?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type Announcement = {
  _id: string;
  _type: "announcement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content?: string;
  cta?: Link;
  start?: string;
  end?: string;
};

export type Link = {
  _type: "link";
  label?: string;
  type?: "internal" | "external";
  internal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  external?: string;
  params?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  modules?: Array<
    | ({
        _key: string;
      } & AccordionList)
    | ({
        _key: string;
      } & Breadcrumbs)
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & CreativeModule)
    | ({
        _key: string;
      } & FlagList)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & LogoList)
    | ({
        _key: string;
      } & PricingList)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & StatList)
    | ({
        _key: string;
      } & StepList)
    | ({
        _key: string;
      } & TestimonialList)
    | ({
        _key: string;
      } & TestimonialFeatured)
  >;
  metadata?: Metadata;
};

export type Metadata = {
  _type: "metadata";
  slug?: Slug;
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  noIndex?: boolean;
};

export type Site = {
  _id: string;
  _type: "site";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    name?: string;
    image?: {
      default?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      light?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      dark?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
    _type: "logo";
  };
  announcements?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "announcement";
  }>;
  ctas?: Array<
    {
      _key: string;
    } & Cta
  >;
  copyright?: Array<string>;
  headerMenu?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "navigation";
  };
  footerMenu?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "navigation";
  };
  social?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "navigation";
  };
  ogimage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Navigation = {
  _id: string;
  _type: "navigation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  items?: Array<
    | ({
        _key: string;
      } & Link)
    | ({
        _key: string;
      } & LinkList)
  >;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | TestimonialList
  | TestimonialFeatured
  | StepList
  | StatList
  | Spacer
  | PricingList
  | LogoList
  | Hero
  | FlagList
  | CreativeModule
  | Callout
  | Breadcrumbs
  | AccordionList
  | HeroLine
  | Slug
  | LinkList
  | Cta
  | Testimonial
  | Pricing
  | Logo
  | Announcement
  | Link
  | Page
  | Metadata
  | Site
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Navigation;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/components/Home.astro
// Variable: homeQuery
// Query: *[_type == 'page' && metadata.slug.current == 'home'][0]{  ...,}
export type HomeQueryResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  modules?: Array<
    | ({
        _key: string;
      } & AccordionList)
    | ({
        _key: string;
      } & Breadcrumbs)
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & CreativeModule)
    | ({
        _key: string;
      } & FlagList)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & LogoList)
    | ({
        _key: string;
      } & PricingList)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & StatList)
    | ({
        _key: string;
      } & StepList)
    | ({
        _key: string;
      } & TestimonialList)
    | ({
        _key: string;
      } & TestimonialFeatured)
  >;
  metadata?: Metadata;
} | null;

// Source: ./src/layouts/Layout.astro
// Variable: siteQuery
// Query: *[_type == 'site'][0]{  ...,  headerMenu->,  footerMenu->}
export type SiteQueryResult = {
  _id: string;
  _type: "site";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    name?: string;
    image?: {
      default?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      light?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      dark?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
    _type: "logo";
  };
  announcements?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "announcement";
  }>;
  ctas?: Array<
    {
      _key: string;
    } & Cta
  >;
  copyright?: Array<string>;
  headerMenu: {
    _id: string;
    _type: "navigation";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    items?: Array<
      | ({
          _key: string;
        } & LinkList)
      | ({
          _key: string;
        } & Link)
    >;
  } | null;
  footerMenu: {
    _id: string;
    _type: "navigation";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    items?: Array<
      | ({
          _key: string;
        } & LinkList)
      | ({
          _key: string;
        } & Link)
    >;
  } | null;
  social?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "navigation";
  };
  ogimage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'page' && metadata.slug.current == 'home'][0]{\n  ...,\n}": HomeQueryResult;
    "*[_type == 'site'][0]{\n  ...,\n  headerMenu->,\n  footerMenu->\n}": SiteQueryResult;
  }
}
